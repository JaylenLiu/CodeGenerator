package ${packagePath}.controller;
## 类名首字母大写
#set($upperClassName = $className.substring(0,1).toUpperCase()+ $className.substring(1))
## 类名首字母小写
#set($lowerClassName = $className.substring(0,1).toLowerCase()+ $className.substring(1))
import ${packagePath}.entity.${upperClassName};
import ${packagePath}.service.${upperClassName}Service;
import ${packagePath}.common.Message;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
public class ${upperClassName}Controller{
    @Autowired
    ${upperClassName}Service service;

    @ApiOperation(value = "根据id查询", notes = "根据id查询")
    @GetMapping(value = "/${lowerClassName}")
    public Message selectById(${primaryKeyType} id){
        return Message.successMessage(service.selectByPrimaryKey(id));
    }

    @ApiOperation(value = "获取所有数据", notes = "获取所有数据")
    @GetMapping("/${lowerClassName}s")
    public Message selectAll(){
        ${upperClassName}Example example = new ${upperClassName}Example();
        return Message.successMessage(service.selectAll(example));
    }

    @ApiOperation(value = "分页获取数据", notes = "分页获取数据")
    @GetMapping("/${lowerClassName}sPages")
    public Message selectByPages(){
        ${upperClassName}Example example = new ${upperClassName}Example();
        return service.selectByPages(example);
    }

    @ApiOperation(value = "新增${upperClassName}", notes = "新增${upperClassName}")
    @PostMapping("/${lowerClassName}")
    public Message insert${upperClassName}(${upperClassName} ${lowerClassName}){
        ${lowerClassName}.preInsert();
        return Message.successMessage(service.insert(${lowerClassName}));
    }

    @ApiOperation(value = "删除${upperClassName}", notes = "删除${upperClassName}")
    @DeleteMapping("/${lowerClassName}")
    public Message delete${upperClassName}(${primaryKeyType} id){
        return Message.successMessage(service.deleteByPrimaryKey(id));
    }

    @ApiOperation(value = "删除多个", notes = "删除多个")
    @DeleteMapping("/${lowerClassName}s")
    public Message deleteByIds(${primaryKeyType}[] ids){
        if (ids == null || ids.length == 0) {
            return Message.nullParamsMessage();
        } else {
            return Message.successMessage(service.deleteByIDs(ids));
        }
    }

    @ApiOperation(value = "更新${upperClassName}", notes = "更新${upperClassName}")
    @PutMapping(value = "/${lowerClassName}")
    public Message update${upperClassName}(${upperClassName} ${lowerClassName}){
        ${lowerClassName}.preUpdate();
        return Message.successMessage(service.updateByPrimaryKeySelective(${lowerClassName}));
    }
}
